{% extends "base.jinja2" %}
{% from "macros.jinja2" import translator %}

{% block header %}
#import {{ type_def.objcpp.header | quote }}
#import "pydjinni/marshal.h"
#include <cassert>
{% endblock %}

{% block content %}
auto {{ type_def.objcpp.name }}::toCpp(ObjcType obj) -> CppType {
    assert(obj);
    return {
    {% for field in type_def.fields %}
        {{ translator(field.type_ref) }}::toCpp(obj.{{ field.objc.name }}){{ "," if not loop.last }}
    {% endfor %}
    };
}

auto {{ type_def.objcpp.name }}::fromCpp(const CppType& cpp) -> ObjcType {
    return [[::{{ type_def.objc.typename }} alloc] {{ type_def.objc.init }}
    {%- for field in type_def.fields -%}
        {{ " " ~ field.objc.name if not loop.first }}:({{ translator(field.type_ref) }}::fromCpp(cpp.{{ field.cpp.name }}))
    {%- endfor -%}
    ];
}
{% endblock %}
