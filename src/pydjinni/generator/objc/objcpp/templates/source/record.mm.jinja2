{% extends "base.jinja2" %}

{% block header %}
#import "{{ type_def.objcpp.header }}"
#include <cassert>
{% endblock %}

{% block content %}
auto {{ type_def.objcpp.name }}::toCpp(objcType obj) -> CppType {
    assert(obj);
    return {
    {% for field in type_def.fields %}
        {{ field.type_ref.type_def.objcpp.translator }}::toCpp(obj.{{ field.objc.name }}){{ "," if not loop.last }}
    {% endfor %}
    };
}

auto {{ type_def.objcpp.name }}::fromCpp(const CppType& cpp) -> ObjcType {
    return [[::{{ type_def.objc.typename }} alloc] {{ type_def.objc.init }}
    {%- for field in type_def.fields -%}
        {{ " " ~ field.objc.name if not loop.first }}:({{ field.type_ref.type_def.objcpp.translator }}::fromCpp(cpp.{{ field.cpp.name }}))
    {%- endfor -%}
    ];
}
{% endblock %}
