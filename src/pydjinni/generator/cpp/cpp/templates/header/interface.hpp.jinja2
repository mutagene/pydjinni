{% extends "base.jinja2" %}
{% from "macros.jinja2" import comment, return_type, attributes, constant_declaration %}

{% block header %}
#pragma once

#include <memory>
{% endblock %}

{% block content %}
{{ comment(type_def) }}
class {{ type_def.cpp.name }} {
public:
    virtual ~{{ type_def.cpp.name }}() {}

{% for constant in type_def.constants -%}
    {{ constant_declaration(constant) }}
{%- endfor %}
{% for method in type_def.methods %}
    {{ comment(method) }}
    {{ attributes(method) }} {{ method.cpp.type_spec }} {{ method.cpp.name }}(
    {%- for parameter in method.parameters -%}
        {{ parameter.cpp.type_spec }} {{ parameter.cpp.name ~ (", " if not loop.last) }}
    {%- endfor -%}
    ){{ " const" if method.const }}{{ " = 0" if not method.static }};
{% endfor %}
};
{% endblock %}
