{% extends "base.jinja2" %}
{% from "macros.jinja2" import comment, constant_declaration %}

{% block header %}
#pragma once
#include <algorithm>
{% endblock %}

{% block content %}
{% if type_def.cpp.base_type %}
struct {{ type_def.cpp.derived_name }};
{% endif %}
{% if type_def.comment %}
{{ type_def.cpp.comment }}
{% endif %}
struct {{ type_def.cpp.name }}{{ " final" if not type_def.cpp.base_type }} {
{% for constant in type_def.constants -%}
    {{ constant_declaration(constant) }}
{%- endfor %}
{% for field in type_def.fields %}
    {% if field.comment %}
    {{ field.cpp.comment | indent(4) }}
    {% endif %}
    {{ field.cpp.type_spec }} {{ field.cpp.name }};
{% endfor %}
    {{ type_def.cpp.name }}(
    {%- for field in type_def.fields %}
        {{- field.cpp.type_spec }} {{ field.cpp.name ~ "_" ~ (", " if not loop.last) }}
    {%- endfor %})
    {% for field in type_def.fields %}
    {{ (": " if loop.first else ', ') ~ field.cpp.name }}(std::move({{ field.cpp.name }}_))
    {% endfor %}
    {}

{% if 'init' in type_def.deriving and type_def.fields %}
    {{ type_def.cpp.name }}()
    {% for field in type_def.fields %}
    {{ (": " if loop.first else ', ') ~ field.cpp.name }}()
    {% endfor %}
    {}
{% endif %}
};
{% endblock %}
