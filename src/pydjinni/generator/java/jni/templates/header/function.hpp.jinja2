{% extends "base.jinja2" %}

{% block header %}
#pragma once

#include "pydjinni/jni/support.hpp"
#include {{ type_def.cpp.header | quote }}
{% endblock %}

{% block content %}

class {{ type_def.jni.wrapper }} {
public:
    virtual {{ type_def.cpp.type_spec }} invoke(
        {%- for parameter in type_def.parameters -%}
            {{ parameter.cpp.type_spec }} {{ parameter.cpp.name ~ (", " if not loop.last) }}
        {%- endfor -%}
    ) = 0;
};

class {{ type_def.jni.name }} final : ::pydjinni::JniInterface<{{ type_def.jni.wrapper }}, {{ type_def.jni.name }}> {
public:
    using CppType = {{ type_def.jni.wrapper }};
    using CppOptType = {{ type_def.jni.wrapper }};
    using JniType = {{ type_def.jni.typename.value }};
    using Boxed = {{ type_def.jni.wrapper }};

    ~{{ type_def.jni.name }}();

    static {{ type_def.cpp.typename }} toCpp(JNIEnv* jniEnv, JniType j);
    static ::pydjinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const {{ type_def.cpp.typename }}& c);
    static ::pydjinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const {{ type_def.cpp.typename }}& c);

private:
    {{ type_def.jni.name }}();
    friend ::pydjinni::JniClass<{{ type_def.jni.name }}>;
    friend ::pydjinni::JniInterface<{{ type_def.jni.wrapper }}, {{ type_def.jni.name }}>;

    class CppProxy final : public {{ type_def.jni.wrapper }} {
    public:
        CppProxy(const {{ type_def.cpp.typename }}& lambda) : _lambda(lambda) {};

        {{ type_def.cpp.type_spec }} invoke(
        {%- for parameter in type_def.parameters -%}
            {{ parameter.cpp.type_spec }} {{ parameter.cpp.name ~ (", " if not loop.last) }}
        {%- endfor -%}
        ) override {
            {{ "return " if type_def.return_type_ref }}_lambda(
                {%- for parameter in type_def.parameters -%}
                    {{ parameter.cpp.name ~ (", " if not loop.last) }}
                {%- endfor -%}
            );
        }
    private:
        {{ type_def.cpp.typename }} _lambda;
    };


{% if 'java' in type_def.targets %}
    class JavaProxy final : ::pydjinni::JavaProxyHandle<JavaProxy>, public {{ type_def.jni.wrapper }} {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        {{ type_def.cpp.type_spec }} invoke(
        {%- for parameter in type_def.parameters -%}
            {{ parameter.cpp.type_spec }} {{ parameter.cpp.name ~ (", " if not loop.last) }}
        {%- endfor -%}
        ) override;
    private:
        friend ::pydjinni::JniInterface<{{ type_def.jni.wrapper }}, {{ type_def.jni.translator }}>;
    };

    const ::pydjinni::GlobalRef<jclass> clazz { ::pydjinni::jniFindClass("{{ type_def.jni.class_descriptor }}") };

    const jmethodID method_invoke { ::pydjinni::jniGetMethodID(clazz.get(), "invoke", "{{ type_def.jni.type_signature }}") };

{% endif %}
};
{% endblock %}
