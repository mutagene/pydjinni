{% extends "base.jinja2" %}

{% block header %}
#pragma once

#include "pydjinni/jni/support.hpp"
{% for include in type_def.jni.includes -%}
#include "{{ include | header }}"
{% endfor -%}
{% endblock %}

{% block content %}
class {{ type_def.jni.translator }} final : ::pydjinni::JniFlags {
public:
    using Type = {{ type_def.jni.name }};
    using CppType = {{ type_def.cpp.typename }};
    using JniType = {{ type_def.jni.typename.value }};

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return static_cast<CppType>(::pydjinni::JniClass<Type>::get().ordinal(jniEnv, j)); }
    static ::pydjinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, CppType c) { return ::pydjinni::JniClass<Type>::get().create(jniEnv, static_cast<jint>(c)); }

private:
    {{ type_def.jni.name }}() : JniEnum("{{ type_def.jni.type_signature }}") {}
    friend ::pydjinni::JniClass<Type>;
};
{% endblock %}
