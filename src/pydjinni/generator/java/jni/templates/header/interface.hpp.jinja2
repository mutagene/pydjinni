{% extends "base.jinja2" %}

{% block header %}
#pragma once

#include "djinni/jni/support.hpp"
#include "{{ type_def.jni.header }}"
{% endblock %}

{% block content %}
class {{ type_def.jni.name }} final : ::djinni::JniInterface<{{ type_def.cpp.typename }}, {{ type_def.jni.name }}> {
public:
    using CppType = std::shared_ptr<{{ type_def.cpp.typename }}>;
    using CppOptType = std::shared_ptr<{{ type_def.cpp.typename }}>;
    using JniType = {{ type_def.jni.name }};
    using Boxed = {{ type_def.cpp.typename }};

    ~MyCppInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<{{ type_def.jni.translator }}>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<{{ type_def.jni.translator }}>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    {{ type_def.jni.name }}();
    friend ::djinni::JniClass<{{ type_def.jni.name }}>;
    friend ::djinni::JniInterface<{{ type_def.cpp.typename }}, {{ type_def.jni.name }}>;

};
{% endblock %}
