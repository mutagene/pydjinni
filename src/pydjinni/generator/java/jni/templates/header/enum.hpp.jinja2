{% include "base.jinja2" %}

#pragma once

#include "djinni/jni/djinni_support.hpp"

{% for include in type_def.jni.includes -%}
#include "{{ include }}"
{% endfor -%}

namespace {{ type_def.jni.namespace }} {

class {{ type_def.jni.translator }} final : ::djinni::JniEnum {
public:
    using Type = {{ type_def.jni.translator }}
    using CppType = ::{{ type_def.cpp.identifier }};
    using JniType = jobject;

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return static_cast<CppType>(::djinni::JniClass<Type>::get().ordinal(jniEnv, j)); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, CppType c) { return ::djinni::JniClass<Type>::get().create(jniEnv, static_cast<jint>(c)); }

private:
    Type() : JniEnum("{{ type_def.jni.type_signature }}") {}
    friend ::djinni::JniClass<Type>;
};

}  // namespace {{ type_def.jni.namespace }}
