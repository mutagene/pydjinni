{% extends "base.jinja2" %}

{% block header %}
#include "{{ type_def.jni.header }}"
{% endblock %}

{% block content %}
{{ type_def.jni.name }}::{{ type_def.jni.name }}() : ::djinni::JniInterface<{{ type_def.cpp.typename }}, {{ type_def.jni.name }}>("{{ type_def.jni.type_signature }}") {}
{{ type_def.jni.name }}::~{{ type_def.jni.name }}() = default;

CJNIEXPORT void JNICALL {{ type_def.jni.jni_prefix }}_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    ::pydjinni::translate_exceptions(jniEnv, [&](){
        delete reinterpret_cast<::djinni::CppProxyHandle<{{ type_def.cpp.typename }}>*>(nativeRef);
    });
}

{% for method in type_def.methods %}
CJNIEXPORT {{ method.return_type_ref.type_def.jni.typename if method.return_type_ref else "void" }} JNICALL {{ type_def.jni.jni_prefix }}_{{ method.jni.jni_name }}(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef
    {%- for parameter in method.parameters -%}
    , {{ parameter.type_ref.type_def.jni.typename }} {{ parameter.jni.name }}
    {%- endfor -%}
    ) {
    {{ "return" if method.return_type_ref }} ::pydjinni::translate_exceptions(jniEnv, [&](){
        const auto& ref = ::pydjinni::objectFromHandleAddress<{{ type_def.cpp.typename }}>(nativeRef);
        {{ "auto r = " if method.return_type_ref }}ref->{{ method.cpp.name }}(
        {%- for parameter in method.parameters -%}
            {{ parameter.type_ref.type_def.jni.translator }}::toCpp(jniEnv, {{ parameter.jni.name }}){{ ", " if not loop.last }}
        {%- endfor -%}
        );
        {% if method.return_type_ref %}
        return ::pydjinni::release({{ method.return_type_ref.type_def.jni.translator }}::fromCpp(jniEnv, r));
        {% endif %}
    });
}
{% endfor %}
{% endblock %}
